#!/usr/bin/env python
import os
import sys

env = SConscript("godot-cpp/SConstruct")

# Append the include path for the 'src' directory and Eigen library
env.Append(CPPPATH=["src/", "C:/libs/eigen-3.4.0"])

# For reference:
# - CCFLAGS are compilation flags shared between C and C++
# - CFLAGS are for C-specific compilation flags
# - CXXFLAGS are for C++-specific compilation flags
# - CPPFLAGS are for pre-processor flags
# - CPPDEFINES are for pre-processor defines
# - LINKFLAGS are for linking flags

# Point and link all of the node libraries
sources = (
    Glob("src/*.cpp")
    + Glob("src/utility/*.cpp")
    + Glob("src/neural_network/*.cpp")
    + Glob("src/test_network_node/*.cpp")
    + Glob("src/layer/*.cpp")
    + Glob("src/linear_regression/*.cpp")
    + Glob("src/decision_tree/*.cpp")
)

if env["platform"] == "macos":
    library = env.SharedLibrary(
        "bin/mlgodotkit.{}.{}.framework/libmlgodotkit.{}.{}".format(
            env["platform"], env["target"], env["platform"], env["target"]
        ),
        source=sources,
    )
elif env["platform"] == "ios":
    if env["ios_simulator"]:
        library = env.StaticLibrary(
            "bin/mlgodotkit.{}.{}.simulator.a".format(env["platform"], env["target"]),
            source=sources,
        )
    else:
        library = env.StaticLibrary(
            "bin/mlgodotkit.{}.{}.a".format(env["platform"], env["target"]),
            source=sources,
        )
else:
    library = env.SharedLibrary(
        "bin/mlgodotkit{}{}".format(env["suffix"], env["SHLIBSUFFIX"]),
        source=sources,
    )

# # ==== TESTING CONFIGURATION ====
#
# # Clone environment for tests (inherits compiler flags, etc.)
# test_env = env.Clone()
#
# # Add include paths to access source headers and Eigen
# test_env.Append(CPPPATH=[
#     "src/",  # So tests can include your nodes and utils
#     "C:/libs/eigen-3.4.0",
#     "tests/catch2/"  # For Catch2
# ])
#
# # Enable exception handling for Catch2 (IMPORTANT!)
# test_env.Append(CXXFLAGS=["-fexceptions"])
#
# # Link tests to the built shared Godot module
# test_env.Append(LIBPATH=["bin/"])
# test_env.Append(LINKFLAGS=["bin/libmlgodotkit.windows.template_debug.x86_64.a"])
#
# # List of test sources
# test_sources = [
#     'tests/catch2/catch_amalgamated.cpp',  # Catch2 main
#     'tests/test_dtreenode.cpp'             # Your test file
# ] + sources
#
# # Build test executable
# test_program = test_env.Program(
#     target='bin/tests/run_tests',
#     source=test_sources
# )

# Build both shared library and test executable when running 'scons'
Default([library])